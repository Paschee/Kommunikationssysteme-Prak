Version = "2.2.3"
// Unabhängige Versuche mit "client" und "server"

// Hier die Ablaufumgebung auswählen
environment = "eduroam"

// Anzeige der Meldungen von "Utils.writeLog"
// Meldungen mit den eingetragenen Debug-Leveln werden angezeigt
// Normale Ausgaben:
// 1: Anwendung, 2: TCP, 3: UDP, 4: IP, 5: Link, 6: Anschluesse
// Debugging:
// 11: Anwendung, 22: TCP, 33: UDP, 44: IP, 55: Link, 66: Anschluesse
// Beispiel: [1,3,33]: Anwendung normal und UDP normal und debugging
debugLevel = [1,2,3,4,5,6,66]

// Verzögerung in Millisekunden bei der Ausgabe von Utils.writelog (zum Mitlesen auf dem Terminal)
debugDelay = 0

// TCP-Schicht
deltaTimeOut = common.utils.Utils.sec05 // Periode fuer Sendetimeout-Countdown
timeOut = deltaTimeOut * 5 // Timeout fuer Sendewiederholung

// IP-Schicht
// eine einheitliche Subnet-Maske fuer alle
// Hiermit kann die Netzwerk-Id von der Host-Id getrennt werden
globalNetMask = "255.255.255.0"

// Auswahl einer Ablaufumgebung durch Setzen der Konstanten "environment"
environments {
    // ********* Virtual 1 ********** //
    // Entwicklung des HTTP-Servers

    virtual1 {
        client {
            // IP-Adresse des Servers
            serverIpAddr = "192.168.1.11"

            // TCP- und UDP-Portnummer der Serveranwendung
            serverPort = 5100

            // Eigene TCP- und UDP-Portnummer
            ownPort = 5100

            // Festlegung der Netzwerkanschluesse
            //      virtual:"true" - ein Anschluss in ein virtuelles LAN,
            //              "false" - ein Anschluss an ein existierendes Ethernet-LAN
            //      lpName:"lp1" - LinkPort: wird in der Routingtabelle zur Kennzeichnung der
            //                          zu wählenden Übertragungsstrecke und
            //                          in der Link-Schicht zur Auswahl des Anschlusses verwendet
            //      hub:1 - der zu verwendende virtuelle HUB (Konstanten sind vordefiniert in ConnectorToVirtual)
            //      connector:1 - Nummer des Anschlusses am HUB, muss ueber alle Endgeräte und Anschluesse in
            //                    einem virtuellen LAN eindeutig sein
            //      macAddr:"00:00:00:00:00:00" - die MAC-Adresse des Anschlusses
            //      ipAddr:"1.1.1.1" - die diesem Link-Port bzw. Anschluss zugewiesene IP-Adresse
            networkConnectors = [
                [virtual: true,
                 lpName: "lp1",
                 link: tests.test1.links.P2PLink1.id,
                 connector: tests.test1.links.P2PLink1.CONNECTOR_1,
                 macAddr: "01:01:01:01:01:01",
                 ipAddr: "192.168.1.10"
                ]
            ]

            // Initiale Routing-Tabelle
            // [["Ziel-IP-Adresse", "Prefix", "Router-IP-Adresse", "Anschluss"], ...]
            routingTable = [
                ["192.168.1.0", "255.255.255.0", "192.168.1.10", "lp1"]   // Route in das eigene IP-Netzwerk
            ]


            // Initiale ARP-Tabelle
            // [IP-Adresse: MAC-Adresse, ]
            arpTable = [:]
        }

        //=============================================================================================

        server {
            ownPort = 5100

            networkConnectors = [
                [virtual: true,
                 lpName: "lp1",
                 link: tests.test1.links.P2PLink1.id,
                 connector: tests.test1.links.P2PLink1.CONNECTOR_2,
                 macAddr: "01:01:01:02:02:02",
                 ipAddr: "192.168.1.11"
                ]
            ]

            routingTable = [
                ["192.168.1.0", "255.255.255.0", "192.168.1.11", "lp1"]   // Route in das eigene IP-Netzwerk
            ]

            arpTable = [:]
        }
    }

    // ********* TI ********** //

    tikabel {
        client {
            serverIpAddr = "141.20.5.188" // IP-Adresse des Web-Servers des Instituts
            serverPort = 80     // Portnummer des HTTP-Dienstes
            routerIpAddr = "141.20.33.1" // Adresse des Default Router
            ownPort = 5101


            // Festlegung der Netzwerkanschluesse
            networkConnectors = [
                [
                virtual: false,
                lpName: "lp1",
                // deviceName: Gerätename des Betriebssystems, hier: Mac OS X, Ethernet-Adapter
                deviceName: "en4",
                macAddr: "40:6c:8f:11:9e:38",
                ipAddr: "141.20.33.23",
                // Dieser Filter fuer Jpcap ist so zu setzen, das nur die erwarteten Frames empfangen werden
                // Die Filtersyntax entspricht der des Kommandos "tcpdump"
                recvFilter: "portrange 5000-5200 or arp" // Jpcap empfängt nur Pakete, die durch diesen Ausdruck gefiltert werden
                ]
            ]

            // Initiale Routing-Tabelle
            // [["Ziel-IP-Adresse", "Prefix", "Router-IP-Adresse", "Anschluss"], ...]
            routingTable = [
                    ["0.0.0.0", "0.0.0.0", routerIpAddr, "lp1"]
                ]

            // Map<IP-Adresse, MAC-Adresse>
            arpTable = [:]
       }

        server {

            routerIpAddr = "141.20.33.1" // Adresse des Default Router
            ownPort = 5101

            // Festlegung der Netzwerkanschluesse
            networkConnectors = [
                [
                virtual: false,
                lpName: "lp1",
                // deviceName: Gerätename im Betriebssystem, hier: Mac OS X, Ethernet-Adapter
                deviceName: "en4",
                macAddr: "40:6c:8f:11:9e:38",
                ipAddr: "141.20.33.23",
                recvFilter: "portrange 5000-5200 or arp"
                ]
            ]

            // Initiale Routing-Tabelle
            // [["Ziel-IP-Adresse", "Prefix", "Router-IP-Adresse", "Anschluss"], ...]
            routingTable = [
                    ["0.0.0.0", "0.0.0.0", routerIpAddr, "lp1"]
                ]

            // Map<IP-Adresse, MAC-Adresse>
            arpTable = [:]
       }
    }

    // ********* EDUROAM ********** //

    eduroam {
        client {
            serverIpAddr = "141.20.5.188" // IP-Adresse des Web-Servers des Instituts
            serverPort = 80     // Portnummer des HTTP-Dienstes
            routerIpAddr = "141.20.192.1" // Adresse des Default Router
            ownPort = 5101


            // Festlegung der Netzwerkanschluesse
            networkConnectors = [
                [
                virtual: false,
                lpName: "lp1",
                // deviceName: Gerätename des Betriebssystems, hier: Mac OS X, WLAN-Adapter
                deviceName: "en0",
                macAddr: "b8:f6:b1:18:0d:9b",
                ipAddr: "141.20.193.120",
                // Dieser Filter fuer Jpcap ist so zu setzen, das nur die erwarteten Frames empfangen werden
                // Die Filtersyntax entspricht der des Kommandos "tcpdump"
                recvFilter: "portrange 5000-5200 or arp" // Jpcap empfängt nur Pakete, die durch diesen Ausdruck gefiltert werden
                ]
            ]

            // Initiale Routing-Tabelle
            // [["Ziel-IP-Adresse", "Prefix", "Router-IP-Adresse", "Anschluss"], ...]
            routingTable = [
                    ["0.0.0.0", "0.0.0.0", routerIpAddr, "lp1"]
                ]

            // Map<IP-Adresse, MAC-Adresse>
            arpTable = [:]
       }

        server {

            routerIpAddr = "141.20.33.1" // Adresse des Default Router
            ownPort = 5101

            // Festlegung der Netzwerkanschluesse
            networkConnectors = [
                [
                virtual: false,
                lpName: "lp1",
                // deviceName: Gerätename im Betriebssystem, hier: Mac OS X, Ethernet-Adapter
                deviceName: "en4",
                macAddr: "40:6c:8f:11:9e:38",
                ipAddr: "141.20.33.23",
                recvFilter: "portrange 5000-5200 or arp"
                ]
            ]

            // Initiale Routing-Tabelle
            // [["Ziel-IP-Adresse", "Prefix", "Router-IP-Adresse", "Anschluss"], ...]
            routingTable = [
                    ["0.0.0.0", "0.0.0.0", routerIpAddr, "lp1"]
                ]

            // Map<IP-Adresse, MAC-Adresse>
            arpTable = [:]
       }
    }
}
